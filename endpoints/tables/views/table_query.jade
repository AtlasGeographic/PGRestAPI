extends ../../../shared_views/layout

block content
	h2 Query

	div.section
		div.headingTitle Entry Fields
		dev Enter a where clause to retrieve a subset of features from this table
	form(action='',method='post',id='queryForm')
		table.inputTable
			tr
				td
					label(for='where') Where
				td
					input(id='where',type='text',value=where,placeholder='where',name='where')

			tr
				td
					label(for='returnfields') Return Fields
				td
					input(id='returnfields',type='text',value=returnfields,placeholder='field1,field2',name='returnfields')


			tr
				td
					label(for='format') Format
				td
					select(id='format',name='format')
						formatlist = [ 'html', 'GeoJSON', 'esriJSON']
							for item in formatlist
								option(value=item, selected=(item==stattype))=item
			tr
				td
					label Return geometry
				td
					-if(!returnGeometry || returnGeometry == 'yes'){
						span(for='optionsRadios1') Yes
						input(type="radio", name="returnGeometry", id="optionsRadios1", value="yes", checked="") Yes
						span(for='optionsRadios2') No
						input(type="radio", name="returnGeometry", id="optionsRadios2", value="no") No
					-}else{
						span(for='optionsRadios1') Yes
						input(type="radio", name="returnGeometry", id="optionsRadios1", value="yes") Yes
						span(for='optionsRadios2') No
						input(type="radio", name="returnGeometry", id="optionsRadios2", value="no", checked="") No
					-}
			
			tr
				td
					label Return feature envelope(s)
				td
					-if(!returnGeometryEnvelopes || returnGeometryEnvelopes == 'no'){
						span(for='optionsGeomEnv1') Yes
						input(type="radio", name="returnGeometryEnvelopes", id="optionsGeomEnv1", value="yes") Yes
						span(for='optionsGeomEnv2') No
						input(type="radio", name="returnGeometryEnvelopes", id="optionsGeomEnv2", value="no", checked="") No
					-}else{
						span(for='optionsGeomEnv1') Yes
						input(type="radio", name="returnGeometryEnvelopes", id="optionsGeomEnv1", value="yes", checked="") Yes
						span(for='optionsGeomEnv2') No
						input(type="radio", name="returnGeometryEnvelopes", id="optionsGeomEnv2", value="no") No
					-}

			tr
				td
					label(for='groupby') Group By Fields
				td
					input(id='groupby',type='text',value=groupby,placeholder='field2,field3',name='groupby')

			tr
				td
					label(for='outputsrid') Output SRID
				td
					input(id='outputsrid',type='text',value=outputsrid,placeholder='3857',name='outputsrid')
		
			tr
				td
					label(for='statsdef') Statistics definition
				td
					textarea(id='statsdef',placeholder='count:field1,sum:field2',name='statsdef')
						|#{statsdef}
			
			tr
				td
					label(for='wkt') Well Known Text (WKT) Geometry
				td
					textarea(id='wkt',placeholder='POLYGON((85.341 25.811,85.523 25.838,85.665 25.719,85.479 25.598,85.278 25.687,85.341 25.811))',name='wkt')
						|#{wkt}

			tr
				td
					label(for='limit') Feature limit
				td
					input(id='limit',type='text',value=limit,placeholder='1000',name='limit')


		div(data-role='fieldcontain')   
			input(type='submit',value='Submit',data-transition='fade', data-theme='c')

	
	- var requestSample = [];
	- var postSample = [];

	-if(where)
		- requestSample.push("where=" + encodeURIComponent(where))
		- postSample.push("where: '" + where + "'")


	-if(returnfields)
		- requestSample.push("returnfields=" + encodeURIComponent(returnfields))
		- postSample.push("returnfields: '" + returnfields.replace(/\s+/g, "") + "'")

	
	-if(format)
		- requestSample.push("format=" + encodeURIComponent(format))
		- postSample.push("format: 'geojson'") 

	-if(returnGeometry)
		- requestSample.push("returnGeometry=" + encodeURIComponent(returnGeometry))
		- postSample.push("returnGeometry: '" + returnGeometry + "'")


	-if(returnGeometryEnvelopes)
		- requestSample.push("returnGeometryEnvelopes=" + encodeURIComponent(returnGeometryEnvelopes))
		- postSample.push("returnGeometryEnvelopes: '" + returnGeometryEnvelopes + "'")


	-if(groupby)
		- requestSample.push("groupby=" + encodeURIComponent(groupby))
		- postSample.push("groupby: '" + groupby + "'")


	-if(statsdef)
		- requestSample.push("statsdef=" + encodeURIComponent(statsdef))
		- postSample.push("statsdef: '" + statsdef + "'")


	-if(wkt)
		- requestSample.push("wkt=" + encodeURIComponent(wkt))
		- postSample.push("wkt: '" + wkt + "'")


	-if(limit)
		- requestSample.push("limit=" + encodeURIComponent(limit))
		- postSample.push("limit: '" + limit + "'")



	div.section
		h3 Code Sample
		span Here's how to hit this endpoint programatically to get this data

		h4 POST
		pre.codePreview
			|//define POST arguments
			|var postArgs = {
			|     #{postSample.join(",\n    ")}
			|};
			|&nbsp;
			|//jQuery JSONP POST
			|$.getJSON('#{link}?callback=?', postArgs).done(function (data) {
			|    //Callback on success
			|    console.log(data);
			|})


	h4 GET
	pre.codePreview
		|#{"http://" + host + path + "?" + requestSample.join("&")}

	-if(requestSample.length > 0){

	-}

	-if(infoMessage){
		div.infoMessage
			|#{infoMessage}
	-}
	-if(errorMessage){
		div.errorMessage
			|#{errorMessage}
	-}


block sidebar
	.widget
		h2 Results
		.results
			- if (featureCollection){
				-if(featureCollection.features && featureCollection.features.length > 0 && featureCollection.features[0].geometry){
					script.
						var geojson = !{JSON.stringify(featureCollection)};

					//Map Div
					div#map(style='height:400px;width:400px;')
					input(type='button', value='update query with map extent',onclick='updateWKTAndPost()')

					//Load Leaflet
					script.
						function updateWKTAndPost(){
							//Get the map bounds, convert to WKT, update WKT input box, and POST
							if(map){
								var bounds = map.getBounds();
								var NW = bounds.getNorthWest();
								var NE = bounds.getNorthEast();
								var SE = bounds.getSouthEast();
								var SW = bounds.getSouthWest();

								var wktBBox = "POLYGON(({A},{B},{C},{D},{E}))".replace("{A}", NW.lng + " " + NW.lat).replace("{B}", NE.lng + " " + NE.lat).replace("{C}", SE.lng + " " + SE.lat).replace("{D}", SW.lng + " " + SW.lat).replace("{E}", NW.lng + " " + NW.lat);
								$("#wkt").text(wktBBox);
								document.getElementById("queryForm").submit();
							}

						}

						var map = L.map('map').setView([51.505, -0.09], 13);
						L.tileLayer('http://{s}.tiles.mapbox.com/v3/examples.map-vyofok3q/{z}/{x}/{y}.png').addTo(map);
						previewLayer = L.geoJson(geojson).addTo(map);
						map.fitBounds(previewLayer);
				-}


				-if(featureCollection.features){
					div(style='margin-top:20px;')
						i # records: #{featureCollection.features.length}
					each val, key in featureCollection.features
						div.propertyGroup
							each ival, ikey in val.properties
								-if(ival && ival.coordinates){
									each egval, egkey in ival
										div.geometry #{ikey}: #{egkey}: #{egval}
								-}else{
									div.property #{ikey}: #{ival}
								-}
								
							-if(val.geometry){
								-if(val.geometry.geometries){
									each mgval, mgkey in val.geometry.geometries
										-if(mgval.coordinates){
											div.geometries #{mgval.type}: #{mgval.coordinates}
										-}
								-}else{
									each gval, gkey in val.geometry
										div.geometry geometry: #{gkey}: #{gval}
								-}
							-}
							
				-}else{
					div.propertyGroup No results found
				-}
			-}
			