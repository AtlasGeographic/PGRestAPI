//8.31.2013 - Ryan Whitley
//Starting a Plug and Play GP Workflow

/*
Require the modules you need here.
They must be installed in the main application using npm install.  Will work later on making this more modular
*/

var flow = require('flow'); //Requiring Flow module
var pg = require('pg'); //Requiring PostGres module



var operation = {};

/* Operation Metadata - All 3 Required */
operation.name = "Buffer"; //Name of the GP Operation.  Should be unique and meaningful.
operation.description = "Buffers a point and returns the geometry as WKT.";
operation.inputs = {};


/* Operation input parameters */
operation.inputs["input_geometry"] = { value: "", required: true, help: "input geometry in WKT format" };
operation.inputs["buffer_distance"] = { value: "", required: true, help: "buffer distance, in meters" };


//Since we don't want to be writing and creating new PostGres functions from this app, use this anonymous code block in postgres.
operation.GPQuery = "DO $$DECLARE " +
"orig_srid int; " +
"utm_srid int; " +
"input geometry := ST_GeomFromText('{wkt}', 4326); " +
"geomgeog geometry; " +
"zone int; " +
"pref int; " +
"BEGIN " +
"geomgeog:= ST_Transform(input,4326); " +
"IF (ST_Y(geomgeog))>0 THEN " +
"pref:=32600; " +
"ELSE " +
"pref:=32700; " +
"END IF; " +
"zone:=floor((ST_X(geomgeog)+180)/6)+1; " +
"orig_srid:= ST_SRID(input); " +
"utm_srid:= zone+pref; " +
"drop table if exists _temp; " +
"create temporary table _temp as " +
"SELECT ST_AsGeoJSON(ST_transform(ST_Buffer(ST_transform(input, utm_srid), 2000), orig_srid)) as geom; " +
"END$$; " +
"select * from _temp;"


/* Operation must have an execute method.  Flow will help process asynchronous steps in a more procedural manner.  */
operation.execute = flow.define(
    function (args, callback) {
        this.args = args;
        this.callback = callback;

        operation.inputs["input_geometry"].value = args.input_geometry;
        operation.inputs["buffer_distance"].value = args.buffer_distance;

        //See if inputs are set. Incoming arguments should contain the same properties as the input parameters.
        if (operation.isInputValid(operation.inputs) === true) {
            //Take the point and buffer it in PostGIS.  Replace the placeholder in the query with the passed in WKT.
            operation.executePgQuery(operation.GPQuery.replace("{wkt}", operation.inputs["input_geometry"].value), this);//Flow to next function when done.

        }
        else {
            //Invalid arguments
            //return message
            callback({text: "Missing required arguments"}); //err is first argument
        }
    },
    function (err, results) {
        //Step 2 - get the results and pass back to calling function
        //results is a json object with the structure { status: <string>, rows: [<an array of json objects>]}
        this.callback(err, results);
    }
)

//Make sure arguments are tight before executing
operation.isInputValid = function(input) {
  //Check inputs
  if(input){
    for (var key in input) {
      if (input.hasOwnProperty(key)) {
        if (input[key].required && (!input[key].value || input[key].value.length == 0)) {
            //Required but not present.
            return false;
        }
      }
    }
  }

  return true;
};




module.exports = Buffer;